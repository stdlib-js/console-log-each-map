{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar resolveGetter = require( '@stdlib/array-base-resolve-getter' );\nvar nulls = require( '@stdlib/array-base-nulls' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar format = require( '@stdlib/string-format' );\nvar logger = require( '@stdlib/console-log' );\n\n\n// MAIN //\n\n/**\n* Inserts array element values and the result of a callback function into a format string and prints the result.\n*\n* @param {string} str - format string\n* @param {...(Collection|*)} [args] - collections or values\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} callback argument must be a function\n* @throws {RangeError} provided collections must have the same length\n* @returns {void}\n*\n* @example\n* function add( x, y ) {\n*     return x + y;\n* }\n*\n* var x = [ 1, 2, 3 ];\n* var y = [ 4, 5, 6 ];\n*\n* logEachMap( '%d + %d = %d', x, y, add );\n* // e.g., => '1 + 4 = 5\\n2 + 5 = 7\\n3 + 6 = 9\\n'\n*\n* @example\n* function multiply( x, y ) {\n*     return x * y;\n* }\n*\n* var x = [ 0.5, 1.0, 1.5 ];\n* var y = [ 0.5, 0.75, 1.0 ];\n*\n* logEachMap( '%0.2f * %0.2f = %0.2f', x, y, multiply );\n* // e.g., => '0.50 * 0.50 = 0.25\\n1.00 * 0.75 = 0.75\\n1.50 * 1.00 = 1.50\\n'\n*\n* @example\n* function append( x, y ) {\n*     return x + y;\n* }\n*\n* var x = [ 'foo', 'bar' ];\n* var y = [ 'baz', 'beep' ];\n*\n* logEachMap( '%s+%s = %s', x, y, append );\n* // e.g., => 'foo+baz = foobaz\\nbar+beep = barbeep\\n'\n*/\nfunction logEachMap( str ) {\n\tvar strides;\n\tvar offsets;\n\tvar getters;\n\tvar thisArg;\n\tvar cbArgs;\n\tvar values;\n\tvar nargs;\n\tvar args;\n\tvar clbk;\n\tvar len;\n\tvar v;\n\tvar s;\n\tvar i;\n\tvar j;\n\n\tnargs = arguments.length;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tnargs -= 1;\n\tif ( isFunction( arguments[ nargs ] ) ) {\n\t\tclbk = arguments[ nargs ];\n\t\tnargs -= 1;\n\t} else {\n\t\tclbk = arguments[ nargs-1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t\t}\n\t\tthisArg = arguments[ nargs ];\n\t\tnargs -= 2;\n\t}\n\tgetters = [];\n\tstrides = [];\n\targs = [];\n\n\t// Find the first argument which is a collection...\n\tfor ( i = 1; i < nargs+1; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isCollection( v ) ) {\n\t\t\tgetters.push( resolveGetter( v ) );\n\t\t\targs.push( v );\n\t\t\tstrides.push( 1 );\n\t\t\tlen = v.length;\n\t\t\ti += 1;\n\t\t\tbreak;\n\t\t} else {\n\t\t\tv = [ v ];\n\t\t\tgetters.push( resolveGetter( v ) );\n\t\t\targs.push( v );\n\t\t\tstrides.push( 0 );\n\t\t}\n\t}\n\t// If weren't provided a collection argument, all arguments are \"broadcasted\"...\n\tif ( len === void 0 ) {\n\t\tlen = 1;\n\t}\n\t// For the remaining arguments, resolve each argument to a collection...\n\tfor ( ; i < nargs+1; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isCollection( v ) ) {\n\t\t\tif ( v.length !== len ) {\n\t\t\t\tthrow new RangeError( 'invalid argument. Provided collections must have the same length.' );\n\t\t\t}\n\t\t\ts = 1;\n\t\t} else {\n\t\t\tv = [ v ];\n\t\t\ts = 0;\n\t\t}\n\t\tgetters.push( resolveGetter( v ) );\n\t\targs.push( v );\n\t\tstrides.push( s );\n\t}\n\t// Initialize an array containing values for generating an interpolated format string:\n\tvalues = nulls( nargs+2 ); // [ str, v0, v1, ..., vN, result ]\n\tvalues[ 0 ] = str;\n\n\t// Initialize an array containing index offsets, which are \"pointers\" to the current set of array elements when calling the provided callback function:\n\toffsets = zeros( nargs ); // [ o0, o1, ..., oN ]\n\n\t// Initialize an array containing arguments to be provided to the callback function:\n\tcbArgs = nulls( nargs+2 ); // [ v0, v1, ..., vN, index, arrays ]\n\n\t// The last argument provided to the callback function should be the list of input arrays/broadcasted values:\n\tcbArgs[ nargs+1 ] = args;\n\n\t// Print an interpolated format string for each set of broadcasted array values...\n\tfor ( i = 0; i < len; i++ ) {\n\t\t// Resolve the set of broadcasted array values...\n\t\tfor ( j = 0; j < nargs; j++ ) {\n\t\t\tcbArgs[ j ] = getters[ j ]( args[ j ], offsets[ j ] );\n\t\t\tvalues[ j+1 ] = cbArgs[ j ];\n\t\t\toffsets[ j ] += strides[ j ];\n\t\t}\n\t\t// The second-to-last callback argument should be the current array element index:\n\t\tcbArgs[ nargs ] = i;\n\n\t\t// Compute the result of passing the current set of array elements to the provided callback function:\n\t\tvalues[ nargs+1 ] = clbk.apply( thisArg, cbArgs );\n\n\t\t// Print an interpolated string:\n\t\tlogger( format.apply( null, values ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = logEachMap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Insert array element values and the result of a callback function into a format string and print the result.\n*\n* @module @stdlib/console-log-each-map\n*\n* @example\n* var logEachMap = require( '@stdlib/console-log-each-map' );\n*\n* function add( x, y ) {\n*     return x + y;\n* }\n*\n* var x = [ 1, 2, 3 ];\n* var y = [ 4, 5, 6 ];\n*\n* logEachMap( '%d + %d = %d', x, y, add );\n* // e.g., => '1 + 4 = 5\\n2 + 5 = 7\\n3 + 6 = 9\\n'\n*\n* function multiply( x, y ) {\n*     return x * y;\n* }\n*\n* var x = [ 0.5, 1.0, 1.5 ];\n* var y = [ 0.5, 0.75, 1.0 ];\n*\n* logEachMap( '%0.2f * %0.2f = %0.2f', x, y, multiply );\n* // e.g., => '0.50 * 0.50 = 0.25\\n1.00 * 0.75 = 0.75\\n1.50 * 1.00 = 1.50\\n'\n*\n* function append( x, y ) {\n*     return x + y;\n* }\n*\n* var x = [ 'foo', 'bar' ];\n* var y = [ 'baz', 'beep' ];\n*\n* logEachMap( '%s+%s = %s', x, y, append );\n* // e.g., => 'foo+baz = foobaz\\nbar+beep = barbeep\\n'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAa,QAAS,4BAA6B,EACnDC,EAAe,QAAS,8BAA+B,EACvDC,EAAgB,QAAS,mCAAoC,EAC7DC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAS,QAAS,uBAAwB,EAC1CC,EAAS,QAAS,qBAAsB,EAkD5C,SAASC,EAAYC,EAAM,CAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAP,EAAQ,UAAU,OACb,CAAChB,EAAUS,CAAI,EACnB,MAAM,IAAI,UAAWH,EAAQ,kEAAmEG,CAAI,CAAE,EAGvG,GADAO,GAAS,EACJf,EAAY,UAAWe,CAAM,CAAE,EACnCE,EAAO,UAAWF,CAAM,EACxBA,GAAS,MACH,CAEN,GADAE,EAAO,UAAWF,EAAM,CAAE,EACrB,CAACf,EAAYiB,CAAK,EACtB,MAAM,IAAI,UAAWZ,EAAQ,uEAAwEY,CAAK,CAAE,EAE7GL,EAAU,UAAWG,CAAM,EAC3BA,GAAS,CACV,CAMA,IALAJ,EAAU,CAAC,EACXF,EAAU,CAAC,EACXO,EAAO,CAAC,EAGFK,EAAI,EAAGA,EAAIN,EAAM,EAAGM,IAEzB,GADAF,EAAI,UAAWE,CAAE,EACZpB,EAAckB,CAAE,EAAI,CACxBR,EAAQ,KAAMT,EAAeiB,CAAE,CAAE,EACjCH,EAAK,KAAMG,CAAE,EACbV,EAAQ,KAAM,CAAE,EAChBS,EAAMC,EAAE,OACRE,GAAK,EACL,KACD,MACCF,EAAI,CAAEA,CAAE,EACRR,EAAQ,KAAMT,EAAeiB,CAAE,CAAE,EACjCH,EAAK,KAAMG,CAAE,EACbV,EAAQ,KAAM,CAAE,EAQlB,IAJKS,IAAQ,SACZA,EAAM,GAGCG,EAAIN,EAAM,EAAGM,IAAM,CAE1B,GADAF,EAAI,UAAWE,CAAE,EACZpB,EAAckB,CAAE,EAAI,CACxB,GAAKA,EAAE,SAAWD,EACjB,MAAM,IAAI,WAAY,mEAAoE,EAE3FE,EAAI,CACL,MACCD,EAAI,CAAEA,CAAE,EACRC,EAAI,EAELT,EAAQ,KAAMT,EAAeiB,CAAE,CAAE,EACjCH,EAAK,KAAMG,CAAE,EACbV,EAAQ,KAAMW,CAAE,CACjB,CAeA,IAbAN,EAASX,EAAOY,EAAM,CAAE,EACxBD,EAAQ,CAAE,EAAIN,EAGdE,EAAUN,EAAOW,CAAM,EAGvBF,EAASV,EAAOY,EAAM,CAAE,EAGxBF,EAAQE,EAAM,CAAE,EAAIC,EAGdK,EAAI,EAAGA,EAAIH,EAAKG,IAAM,CAE3B,IAAMC,EAAI,EAAGA,EAAIP,EAAOO,IACvBT,EAAQS,CAAE,EAAIX,EAASW,CAAE,EAAGN,EAAMM,CAAE,EAAGZ,EAASY,CAAE,CAAE,EACpDR,EAAQQ,EAAE,CAAE,EAAIT,EAAQS,CAAE,EAC1BZ,EAASY,CAAE,GAAKb,EAASa,CAAE,EAG5BT,EAAQE,CAAM,EAAIM,EAGlBP,EAAQC,EAAM,CAAE,EAAIE,EAAK,MAAOL,EAASC,CAAO,EAGhDP,EAAQD,EAAO,MAAO,KAAMS,CAAO,CAAE,CACtC,CACD,CAKAhB,EAAO,QAAUS,IC9HjB,IAAIgB,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isString", "isFunction", "isCollection", "resolveGetter", "nulls", "zeros", "format", "logger", "logEachMap", "str", "strides", "offsets", "getters", "thisArg", "cbArgs", "values", "nargs", "args", "clbk", "len", "v", "s", "i", "j", "main"]
}
